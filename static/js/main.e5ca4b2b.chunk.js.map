{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Loading","this","props","loading","Spinner","style","width","height","size","color","Component","Sent","console","log","sent","noemail","Alert","isOpen","App","sendMessage","formData","FormData","append","state","GOOGLE_FORM_EMAIL_ID","email","setState","axios","post","CORS_PROXY","GOOGLE_FORM_ACTION_URL","then","validate","catch","messageError","handleChange","event","a","target","value","type","checked","name","handleSubmit","preventDefault","validateEmail","username","password","password2","emailState","userExists","passMatch","bind","e","test","Jumbotron","className","display","justifyContent","textAlign","usertype","Container","Form","onSubmit","Col","FormGroup","Input","id","placeholder","valid","invalid","onChange","Button","padding","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2YAeMA,E,uKAEF,OACE,6BAAMC,KAAKC,MAAMC,QAAU,kBAACC,EAAA,EAAD,CAASC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAAUC,KAAK,KAAKC,MAAM,YAAe,kC,GAH7FC,aAQhBC,E,uKAGF,OADAC,QAAQC,IAAIZ,KAAKC,MAAMY,MAAOb,KAAKC,MAAMC,SAAUF,KAAKC,MAAMa,SAE5D,6BAEA,kBAACC,EAAA,EAAD,CAAOP,MAAM,UAAUQ,OAAQhB,KAAKC,MAAMY,OAASb,KAAKC,MAAMC,UAAYF,KAAKC,MAAMa,SAArF,mB,GANaL,aA0JJQ,E,kDA7Ib,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IAsBRiB,YAAc,WACZ,IAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,EAAKC,MAAMC,qBAAsB,EAAKD,MAAME,OAC5D,EAAKC,SAAS,CACZvB,SAAS,IAEXwB,IAAMC,KAAK,EAAKL,MAAMM,WAAa,EAAKN,MAAMO,uBAAwBV,GACnEW,MAAK,WACJnB,QAAQC,IAAI,UACZ,EAAKa,SAAS,CACZD,MAAO,GACPO,SAAU,CACRjB,SAAS,GAEXZ,SAAS,EACTW,KAAM,OAETmB,OAAM,WACP,EAAKP,SAAS,CACZQ,cAAc,EACd/B,SAAS,QA3CI,EA6DnBgC,aA7DmB,uCA6DJ,WAAOC,GAAP,mBAAAC,EAAA,6DACLC,EAAWF,EAAXE,OACFC,EAAwB,aAAhBD,EAAOE,KAAsBF,EAAOG,QAAUH,EAAOC,MAC3DG,EAASJ,EAATI,KAHK,SAIP,EAAKhB,SAAL,eACHgB,EAAOH,IALG,2CA7DI,wDAsEnBI,aAAe,SAACP,GAEd,GADAA,EAAMQ,iBACkB,IAApB,EAAKrB,MAAME,MACb,EAAKN,kBACD,CACJ,EAAK0B,cAAcT,GADf,IAEIJ,EAAa,EAAKT,MAAlBS,SACRA,EAASjB,SAAU,EACnB,EAAKW,SAAS,CAAEM,eA5ElB,EAAKT,MAAQ,CACXE,MAAO,GACPqB,SAAU,GACVC,SAAU,GACVC,UAAW,GACX7C,SAAS,EACTW,KAAM,EACNkB,SAAU,CACRiB,WAAY,GACZC,YAAY,EACZC,WAAW,EACXpC,SAAS,GAGXS,qBAAsB,mBACtBM,uBAAwB,0GACxBD,WAAY,wCAEd,EAAKM,aAAe,EAAKA,aAAaiB,KAAlB,gBApBH,E,0DA+CLC,GACZ,IACQrB,EAAa/B,KAAKsB,MAAlBS,SACgB,IAApB/B,KAAKsB,MAAME,QACbO,EAASjB,SAAU,GAHJ,wJAKJuC,KAAKD,EAAEf,OAAOC,OACzBP,EAASiB,WAAa,cAEtBjB,EAASiB,WAAa,aAExBhD,KAAKyB,SAAS,CAAEM,e,+BAwBR,IAAD,SAC+B/B,KAAKsB,MAAnCE,EADD,EACCA,MADD,EACQqB,SADR,EACkBC,SAEzB,OACE,6BACE,kBAACQ,EAAA,EAAD,KACE,wBAAIC,UAAU,SACd,uBAAGA,UAAU,OAAOnD,MAAO,CAACoD,QAAS,OACnCC,eAAgB,WADlB,wCAEA,wBAAIF,UAAU,SACd,uBAAGnD,MAAO,CAACoD,QAAS,OAAQC,eAAgB,WAA5C,0BAEJ,6BACE,wBAAIrD,MAAO,CAACsD,UAAU,WAAtB,gBAEF,yBAAKtD,MAAO,CAACoD,QAAS,OAAQC,eAAgB,WAC9C,wBAAIrD,MAAO,CAACsD,UAAU,WAAY1D,KAAKC,MAAM0D,UAE7C,kBAACC,EAAA,EAAD,CAAWL,UAAU,MAAMnD,MAAO,CAACoD,QAAS,OAAQC,eAAgB,WAElE,kBAACI,EAAA,EAAD,CAAON,UAAU,OAAOO,SAAU9D,KAAK0C,cACrC,kBAACqB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACE1B,KAAK,QACLE,KAAK,QACLyB,GAAG,eACHC,YAAY,gBACZ7B,MAAOd,EACP4C,MAA0C,gBAAnCpE,KAAKsB,MAAMS,SAASiB,WAC3BqB,QAA4C,eAAnCrE,KAAKsB,MAAMS,SAASiB,WAC7BsB,SAAU,SAAClB,GACT,EAAKR,cAAcQ,GACnB,EAAKlB,aAAakB,QAM1B,yBAAKhD,MAAO,CAACoD,QAAS,OAAQC,eAAgB,WAC9C,kBAACc,EAAA,EAAD,mBAMJ,yBAAKnE,MAAO,CAACoD,QAAS,OAAQC,eAAgB,SAAUe,QAAQ,SAC9D,kBAACzD,EAAA,EAAD,CAAOP,MAAM,SAASQ,OAAQhB,KAAKsB,MAAMS,SAASjB,SAAlD,2BAEF,yBAAKV,MAAO,CAACoD,QAAS,OAAQC,eAAgB,SAAUe,QAAQ,SAE9D,kBAAC,EAAD,CAAStE,QAASF,KAAKsB,MAAMpB,UAC7B,kBAAC,EAAD,CAAMW,KAAMb,KAAKsB,MAAMT,KAAMX,QAASF,KAAKsB,MAAMpB,QAASY,QAASd,KAAKsB,MAAMS,SAASjB,gB,GAvI7EL,aCvBEgE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdtD,OAAM,SAAAuD,GACL5E,QAAQ4E,MAAMA,EAAMC,c","file":"static/js/main.e5ca4b2b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Alert,\n  Container,\n  Col,\n  Form,\n  FormGroup,\n  Input,\n  Jumbotron,\n  Button,\n  Spinner\n  \n} from \"reactstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport axios from 'axios';\nclass Loading extends Component {\n  render() {\n    return (\n      <div>{this.props.loading ? <Spinner style={{ width: '3rem', height: '3rem' }} size=\"sm\" color=\"primary\" /> : <h1></h1>}\n      </div>\n    )\n  }\n}\nclass Sent extends Component {\n  render() {\n    console.log(this.props.sent, !this.props.loading, !this.props.noemail)\n    return (\n      <div>\n        \n      <Alert color=\"success\" isOpen={this.props.sent && !this.props.loading && !this.props.noemail}>Thank you!</Alert>\n\n      </div>\n    )\n  }\n}\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      username: \"\",\n      password: \"\",\n      password2: \"\",\n      loading: false,\n      sent: 0,\n      validate: {\n        emailState: \"\",\n        userExists: false,\n        passMatch: true,\n        noemail: false,\n      },\n      \n      GOOGLE_FORM_EMAIL_ID: 'entry.1917533847',\n      GOOGLE_FORM_ACTION_URL: 'https://docs.google.com/forms/d/e/1FAIpQLSdKjV8dHasVOwux7YBK9LEuaMUhhYoqFaPrpwxNBSrDBbXNBQ/formResponse',\n      CORS_PROXY: 'https://cors-anywhere.herokuapp.com/'\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  sendMessage = () => {  \n    const formData = new FormData() \n    formData.append(this.state.GOOGLE_FORM_EMAIL_ID, this.state.email)\n    this.setState({     \n      loading: true\n    })  \n    axios.post(this.state.CORS_PROXY + this.state.GOOGLE_FORM_ACTION_URL, formData)\n      .then(() => {     \n        console.log('asdasd')\n        this.setState({     \n          email: '',\n          validate: {\n            noemail: false\n          },\n          loading: false,\n          sent: 1\n        })  \n    }).catch(() => {      \n      this.setState({        \n        messageError: true, \n        loading: false  \n      })  \n    })\n  }\n  validateEmail(e) {\n    const emailRex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    const { validate } = this.state;\n    if (this.state.email != \"\"){\n      validate.noemail = false;\n    }\n    if (emailRex.test(e.target.value)) {\n      validate.emailState = \"has-success\";\n    } else {\n      validate.emailState = \"has-danger\";\n    }\n    this.setState({ validate });\n  }\n\n  handleChange = async (event) => {\n    const { target } = event;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const { name } = target;\n    await this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = (event) => {  \n    event.preventDefault()\n    if (this.state.email != \"\"){\n      this.sendMessage()\n    } else{\n      this.validateEmail(event);\n      const { validate } = this.state;\n      validate.noemail = true;\n      this.setState({ validate });\n    }\n    \n  } //other stuff  }\n  render() {\n    const { email, username, password } = this.state;\n\n    return (\n      <div>\n        <Jumbotron>\n          <hr className=\"my-2\" />\n          <p className=\"lead\" style={{display: 'flex', \n            justifyContent: 'center'}}>Description of our problem/solution.</p>\n          <hr className=\"my-2\" />\n          <p style={{display: 'flex', justifyContent: 'center'}}>Extended description.</p>\n        </Jumbotron>\n      <div>\n        <h3 style={{textAlign:\"center\"}}>Interested?</h3>\n      </div>\n      <div style={{display: 'flex', justifyContent: 'center'}}>\n      <h2 style={{textAlign:\"center\"}}>{this.props.usertype}</h2>\n      \n      <Container className=\"App\" style={{display: 'flex', justifyContent: 'center'}}>\n\n        <Form  className=\"form\" onSubmit={this.handleSubmit}>\n          <Col>\n            <FormGroup>\n              <Input\n                type=\"email\"\n                name=\"email\"\n                id=\"exampleEmail\"\n                placeholder=\"Email Address\"\n                value={email}\n                valid={this.state.validate.emailState === \"has-success\"}\n                invalid={this.state.validate.emailState === \"has-danger\"}\n                onChange={(e) => {\n                  this.validateEmail(e);\n                  this.handleChange(e);\n                }}\n              />\n            </FormGroup>\n            \n          </Col>\n          <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Button >Submit</Button>\n          </div>\n        </Form>\n        \n      </Container>\n      </div>\n      <div style={{display: 'flex', justifyContent: 'center', padding:\"10px\"}}>\n        <Alert color=\"danger\" isOpen={this.state.validate.noemail}>Please enter an email.</Alert>\n        </div>\n      <div style={{display: 'flex', justifyContent: 'center', padding:\"10px\"}}>\n\n        <Loading loading={this.state.loading}/>\n        <Sent sent={this.state.sent} loading={this.state.loading} noemail={this.state.validate.noemail}/>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}